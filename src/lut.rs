//-----------------------------------------------------------------------------
/*

Lookup Table Based Math Functions

Faster than standard math package functions, but less accurate.

*/
//-----------------------------------------------------------------------------

use crate::constants::PHASE_SCALE;
use crate::constants::PI;
use crate::utils::abs;

//-----------------------------------------------------------------------------
// Cosine Lookup Table

const COS_LUT_BITS: u32 = 7;
const COS_LUT_SIZE: usize = 1 << COS_LUT_BITS;
const COS_FRAC_BITS: u32 = 32 - COS_LUT_BITS;
const COS_FRAC_MASK: u32 = (1 << COS_FRAC_BITS) - 1;

#[rustfmt::skip]
const COS_LUT_Y: [f32; COS_LUT_SIZE] = [
    1.000000e+00,9.987955e-01,9.951847e-01,9.891765e-01,9.807853e-01,9.700313e-01,9.569403e-01,9.415441e-01,
    9.238795e-01,9.039893e-01,8.819213e-01,8.577286e-01,8.314696e-01,8.032075e-01,7.730105e-01,7.409511e-01,
    7.071068e-01,6.715590e-01,6.343933e-01,5.956993e-01,5.555702e-01,5.141027e-01,4.713967e-01,4.275551e-01,
    3.826834e-01,3.368899e-01,2.902847e-01,2.429802e-01,1.950903e-01,1.467305e-01,9.801714e-02,4.906767e-02,
    6.123234e-17,-4.906767e-02,-9.801714e-02,-1.467305e-01,-1.950903e-01,-2.429802e-01,-2.902847e-01,-3.368899e-01,
    -3.826834e-01,-4.275551e-01,-4.713967e-01,-5.141027e-01,-5.555702e-01,-5.956993e-01,-6.343933e-01,-6.715590e-01,
    -7.071068e-01,-7.409511e-01,-7.730105e-01,-8.032075e-01,-8.314696e-01,-8.577286e-01,-8.819213e-01,-9.039893e-01,
    -9.238795e-01,-9.415441e-01,-9.569403e-01,-9.700313e-01,-9.807853e-01,-9.891765e-01,-9.951847e-01,-9.987955e-01,
    -1.000000e+00,-9.987955e-01,-9.951847e-01,-9.891765e-01,-9.807853e-01,-9.700313e-01,-9.569403e-01,-9.415441e-01,
    -9.238795e-01,-9.039893e-01,-8.819213e-01,-8.577286e-01,-8.314696e-01,-8.032075e-01,-7.730105e-01,-7.409511e-01,
    -7.071068e-01,-6.715590e-01,-6.343933e-01,-5.956993e-01,-5.555702e-01,-5.141027e-01,-4.713967e-01,-4.275551e-01,
    -3.826834e-01,-3.368899e-01,-2.902847e-01,-2.429802e-01,-1.950903e-01,-1.467305e-01,-9.801714e-02,-4.906767e-02,
    -1.836970e-16,4.906767e-02,9.801714e-02,1.467305e-01,1.950903e-01,2.429802e-01,2.902847e-01,3.368899e-01,
    3.826834e-01,4.275551e-01,4.713967e-01,5.141027e-01,5.555702e-01,5.956993e-01,6.343933e-01,6.715590e-01,
    7.071068e-01,7.409511e-01,7.730105e-01,8.032075e-01,8.314696e-01,8.577286e-01,8.819213e-01,9.039893e-01,
    9.238795e-01,9.415441e-01,9.569403e-01,9.700313e-01,9.807853e-01,9.891765e-01,9.951847e-01,9.987955e-01,
];

#[rustfmt::skip]
const COS_LUT_DY: [f32; COS_LUT_SIZE] = [
    -3.589820e-11,-1.076081e-10,-1.790588e-10,-2.500781e-10,-3.204950e-10,-3.901397e-10,-4.588446e-10,-5.264441e-10,
    -5.927753e-10,-6.576785e-10,-7.209973e-10,-7.825791e-10,-8.422756e-10,-8.999431e-10,-9.554424e-10,-1.008640e-09,
    -1.059408e-09,-1.107623e-09,-1.153170e-09,-1.195940e-09,-1.235827e-09,-1.272738e-09,-1.306583e-09,-1.337280e-09,
    -1.364755e-09,-1.388942e-09,-1.409784e-09,-1.427229e-09,-1.441236e-09,-1.451770e-09,-1.458808e-09,-1.462331e-09,
    -1.462331e-09,-1.458808e-09,-1.451770e-09,-1.441236e-09,-1.427229e-09,-1.409784e-09,-1.388942e-09,-1.364755e-09,
    -1.337280e-09,-1.306583e-09,-1.272738e-09,-1.235827e-09,-1.195940e-09,-1.153170e-09,-1.107623e-09,-1.059408e-09,
    -1.008640e-09,-9.554424e-10,-8.999431e-10,-8.422756e-10,-7.825791e-10,-7.209973e-10,-6.576785e-10,-5.927753e-10,
    -5.264441e-10,-4.588446e-10,-3.901397e-10,-3.204950e-10,-2.500781e-10,-1.790588e-10,-1.076081e-10,-3.589820e-11,
    3.589820e-11,1.076081e-10,1.790588e-10,2.500781e-10,3.204950e-10,3.901397e-10,4.588446e-10,5.264441e-10,
    5.927753e-10,6.576785e-10,7.209973e-10,7.825791e-10,8.422756e-10,8.999431e-10,9.554424e-10,1.008640e-09,
    1.059408e-09,1.107623e-09,1.153170e-09,1.195940e-09,1.235827e-09,1.272738e-09,1.306583e-09,1.337280e-09,
    1.364755e-09,1.388942e-09,1.409784e-09,1.427229e-09,1.441236e-09,1.451770e-09,1.458808e-09,1.462331e-09,
    1.462331e-09,1.458808e-09,1.451770e-09,1.441236e-09,1.427229e-09,1.409784e-09,1.388942e-09,1.364755e-09,
    1.337280e-09,1.306583e-09,1.272738e-09,1.235827e-09,1.195940e-09,1.153170e-09,1.107623e-09,1.059408e-09,
    1.008640e-09,9.554424e-10,8.999431e-10,8.422756e-10,7.825791e-10,7.209973e-10,6.576785e-10,5.927753e-10,
    5.264441e-10,4.588446e-10,3.901397e-10,3.204950e-10,2.500781e-10,1.790588e-10,1.076081e-10,3.589820e-11,
];

/// Returns the cosine of x (32 bit unsigned phase value).
pub fn cos_lookup(x: u32) -> f32 {
    let idx = (x >> COS_FRAC_BITS) as usize;
    let frac = (x & COS_FRAC_MASK) as f32;
    return COS_LUT_Y[idx] + frac * COS_LUT_DY[idx];
}

/// Returns the cosine of x (radians).
pub fn cos(x: f32) -> f32 {
    let xi = (abs(x) * PHASE_SCALE) as u32;
    return cos_lookup(xi);
}

/// Returns the sine of x (radians).
pub fn sin(x: f32) -> f32 {
    return cos((PI / 2.0) - x);
}

/// Returns the tangent of x (radians).
pub fn tan(x: f32) -> f32 {
    return sin(x) / cos(x);
}

//-----------------------------------------------------------------------------
// Pow2 Lookup Table

const POW_LUT_BITS: u32 = 7;
const POW_LUT_SIZE: usize = 1 << POW_LUT_BITS;
const POW_LUT_MASK: usize = (1 << POW_LUT_BITS) - 1;
const POW_LUT_SCALE: f32 = (1 << (POW_LUT_BITS * 2)) as f32;

#[rustfmt::skip]
const POW_LUT_0: [f32; POW_LUT_SIZE] = [
    1.000000e+00,1.005430e+00,1.010889e+00,1.016378e+00,1.021897e+00,1.027446e+00,1.033025e+00,1.038634e+00,
    1.044274e+00,1.049944e+00,1.055645e+00,1.061377e+00,1.067140e+00,1.072935e+00,1.078761e+00,1.084618e+00,
    1.090508e+00,1.096429e+00,1.102383e+00,1.108368e+00,1.114387e+00,1.120438e+00,1.126522e+00,1.132639e+00,
    1.138789e+00,1.144972e+00,1.151189e+00,1.157440e+00,1.163725e+00,1.170044e+00,1.176397e+00,1.182785e+00,
    1.189207e+00,1.195664e+00,1.202157e+00,1.208684e+00,1.215247e+00,1.221846e+00,1.228481e+00,1.235151e+00,
    1.241858e+00,1.248601e+00,1.255381e+00,1.262197e+00,1.269051e+00,1.275942e+00,1.282870e+00,1.289836e+00,
    1.296840e+00,1.303881e+00,1.310961e+00,1.318080e+00,1.325237e+00,1.332433e+00,1.339668e+00,1.346942e+00,
    1.354256e+00,1.361609e+00,1.369002e+00,1.376436e+00,1.383910e+00,1.391424e+00,1.398980e+00,1.406576e+00,
    1.414214e+00,1.421893e+00,1.429613e+00,1.437376e+00,1.445181e+00,1.453028e+00,1.460918e+00,1.468850e+00,
    1.476826e+00,1.484845e+00,1.492908e+00,1.501014e+00,1.509164e+00,1.517359e+00,1.525598e+00,1.533882e+00,
    1.542211e+00,1.550585e+00,1.559004e+00,1.567470e+00,1.575981e+00,1.584538e+00,1.593142e+00,1.601793e+00,
    1.610490e+00,1.619235e+00,1.628027e+00,1.636867e+00,1.645755e+00,1.654692e+00,1.663677e+00,1.672710e+00,
    1.681793e+00,1.690925e+00,1.700106e+00,1.709338e+00,1.718619e+00,1.727951e+00,1.737334e+00,1.746767e+00,
    1.756252e+00,1.765788e+00,1.775376e+00,1.785017e+00,1.794709e+00,1.804454e+00,1.814252e+00,1.824103e+00,
    1.834008e+00,1.843967e+00,1.853979e+00,1.864046e+00,1.874168e+00,1.884344e+00,1.894576e+00,1.904863e+00,
    1.915207e+00,1.925606e+00,1.936062e+00,1.946574e+00,1.957144e+00,1.967771e+00,1.978456e+00,1.989199e+00,
];

#[rustfmt::skip]
const POW_LUT_1: [f32; POW_LUT_SIZE] = [
    0.000000e+00,4.230724e-05,8.461627e-05,1.269271e-04,1.692397e-04,2.115541e-04,2.538703e-04,2.961883e-04,
    3.385081e-04,3.808296e-04,4.231530e-04,4.654781e-04,5.078050e-04,5.501338e-04,5.924643e-04,6.347966e-04,
    6.771307e-04,7.194666e-04,7.618043e-04,8.041437e-04,8.464850e-04,8.888280e-04,9.311729e-04,9.735195e-04,
    1.015868e-03,1.058218e-03,1.100570e-03,1.142924e-03,1.185280e-03,1.227637e-03,1.269996e-03,1.312357e-03,
    1.354720e-03,1.397084e-03,1.439451e-03,1.481819e-03,1.524189e-03,1.566561e-03,1.608934e-03,1.651309e-03,
    1.693687e-03,1.736065e-03,1.778446e-03,1.820829e-03,1.863213e-03,1.905599e-03,1.947987e-03,1.990376e-03,
    2.032768e-03,2.075161e-03,2.117556e-03,2.159953e-03,2.202352e-03,2.244752e-03,2.287154e-03,2.329558e-03,
    2.371964e-03,2.414372e-03,2.456781e-03,2.499192e-03,2.541605e-03,2.584020e-03,2.626437e-03,2.668855e-03,
    2.711275e-03,2.753697e-03,2.796121e-03,2.838546e-03,2.880974e-03,2.923403e-03,2.965834e-03,3.008266e-03,
    3.050701e-03,3.093137e-03,3.135575e-03,3.178015e-03,3.220457e-03,3.262900e-03,3.305346e-03,3.347793e-03,
    3.390242e-03,3.432692e-03,3.475145e-03,3.517599e-03,3.560055e-03,3.602513e-03,3.644973e-03,3.687434e-03,
    3.729897e-03,3.772362e-03,3.814829e-03,3.857298e-03,3.899768e-03,3.942240e-03,3.984715e-03,4.027190e-03,
    4.069668e-03,4.112147e-03,4.154629e-03,4.197112e-03,4.239596e-03,4.282083e-03,4.324571e-03,4.367062e-03,
    4.409554e-03,4.452047e-03,4.494543e-03,4.537040e-03,4.579540e-03,4.622041e-03,4.664543e-03,4.707048e-03,
    4.749554e-03,4.792063e-03,4.834573e-03,4.877084e-03,4.919598e-03,4.962113e-03,5.004630e-03,5.047149e-03,
    5.089670e-03,5.132193e-03,5.174717e-03,5.217243e-03,5.259771e-03,5.302301e-03,5.344833e-03,5.387366e-03,
];

/// Returns 2 to the x where x is an integer [-126,127]
fn pow2_int(x: i32) -> f32 {
    return f32::from_bits(((127 + x) << 23) as u32);
}

/// Returns 2 to the x where x is a fraction [0,1)
fn pow2_frac(x: f32) -> f32 {
    let n = (x * POW_LUT_SCALE) as usize;
    let x0 = POW_LUT_0[(n >> POW_LUT_BITS) & POW_LUT_MASK];
    let x1 = POW_LUT_1[n & POW_LUT_MASK];
    return x0 * (x1 + 1.0);
}

/// Returns 2 to the x.
pub fn pow2(x: f32) -> f32 {
    if x == 0.0 {
        return 1.0;
    }
    let mut xi = f32::trunc(x) as i32;
    let mut xf = x - (xi as f32);
    if xf < 0.0 {
        xi -= 1;
        xf += 1.0;
    }
    return pow2_int(xi) * pow2_frac(xf);
}

const LOG_E2: f32 = 1.4426950408889634; // 1.0 / math.log(2)

/// Returns e to the x.
pub fn pow_e(x: f32) -> f32 {
    return pow2(LOG_E2 * x);
}

//-----------------------------------------------------------------------------
